{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","prepearedGoods","sort","a","b","Alphabeth","localeCompare","Length","length","reverse","getPrepearedGoods","makeSetSortField","field","className","type","cn","onClick","prevIsReversed","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,4EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,qBAAAA,E,iBAAAA,M,KA8BE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EA7BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAc,YAAOD,GAiB3B,OAfAC,EAAeC,MAAK,SAACC,EAAGC,GACtB,OAAQT,GACN,KAAKJ,EAASc,UACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKb,EAASgB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAITX,GACFI,EAAeQ,UAGVR,EAOcS,CACnBlB,EAAiBG,EAAWE,GAO9B,SAASc,EAAiBC,GACxB,OAAO,kBAAMhB,EAAagB,IAc5B,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,iBACA,CAAE,WAAYpB,IAAcJ,EAASc,YAGzCW,QAASL,EAAiBpB,EAASc,WARrC,iCAaA,wBACES,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,WAAYpB,IAAcJ,EAASgB,SAGzCS,QAASL,EAAiBpB,EAASgB,QARrC,4BAaA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CAAE,YAAalB,IAClDmB,QAnDQ,kBACdlB,GAAc,SAAAmB,GAAc,OAAKA,MA+C7B,sBAvCgC,KAAdtB,GAAoBE,IAgDpC,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QA9CU,WAClBpB,EAAa,IACbE,GAAc,IAyCR,sBAUJ,6BACGC,EAAamB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC1HlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bb84385c.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabeth = 'alphabet',\n  Length = 'length',\n}\n\nfunction getPrepearedGoods(\n  goods: string[],\n  sortField: string,\n  isReversed:boolean,\n) {\n  const prepearedGoods = [...goods];\n\n  prepearedGoods.sort((a, b) => {\n    switch (sortField) {\n      case SortType.Alphabeth:\n        return a.localeCompare(b);\n      case SortType.Length:\n        return a.length - b.length;\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPrepearedGoods(\n    goodsFromServer, sortField, isReversed,\n  );\n\n  const reverse = () => (\n    setIsReversed(prevIsReversed => !prevIsReversed)\n  );\n\n  function makeSetSortField(field: SortType) {\n    return () => setSortField(field);\n  }\n\n  const reset = () => {\n    const isResetButton = sortField !== '' || isReversed;\n\n    return isResetButton;\n  };\n\n  const resetButton = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button is-info',\n              { 'is-light': sortField !== SortType.Alphabeth },\n            )\n          }\n          onClick={makeSetSortField(SortType.Alphabeth)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button is-success',\n              { 'is-light': sortField !== SortType.Length },\n            )\n          }\n          onClick={makeSetSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !isReversed })}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {reset() && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetButton}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}